 module baud_generator(n,clk,Rst,Rx_baud); 
 parameter n;
 parameter S0 = 2'b00;
 parameter S1 = 2'b01;
 parameter S2 = 2'b10; 
 output Rx_baud; 
 input Rst; 
 input clk; 
 reg Rx_baud; 
 reg [1:0]Pr_state; 
 reg [1:0]Nx_state; 
 integer count;
 always@(Rst or count or Pr_state)
 begin 
 	case(Pr_state)
 	S0:         
 	begin              
 		if(Rst)                
 			begin
 				Nx_state = S0;
 			end 
 		else 
 			begin 
 				Nx_state = S1;
 			end 
 	end
 	S1:         
 	begin             
 		if((count >= 0) && (count <= (41666/2*n)))                
 			begin                     
 				Nx_state = S1;                 
 			end              
 		else              
 			begin              
				Nx_state = S2;
 			end 
 	end
 	S2:
 	begin         
 		if((count > (41666/2*n))  && (count < (41666/n)))       
 			begin                  
 				Nx_state  = S2;              
 			end              
 		else              
 			begin              
 				Nx_state = S0;             
 			end         
 		end
 	default: 
	begin                   
 		Nx_state = S0;               
 	end       
 	endcase 
 end
always@(posedge clk or posedge Rst)
begin 
	if(Rst)
	begin 
		count=0;
		Nx_state=S0;
	end
	else 
	begin
		Pr_state=Nx_state;
	end
	case(Nx_state)
	S0:
	begin
		count=0;
	S1:
	begin 
		Rx_baud=1
		count=count+1;
	end 
	S2:
	begin 
		RX_baud=0;
		count=count+1;
	end 
	default:
	begin 
		count=0;
		Rx_baud=1;
	end
	endcase
end
end
endmodule 
